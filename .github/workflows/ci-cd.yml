name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: backend/requirements.txt
        
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci
      
    - name: Install backend dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Lint frontend
      working-directory: ./frontend
      run: |
        npm run lint
        npm run type-check
        
    - name: Lint backend
      working-directory: ./backend
      run: |
        black --check .
        isort --check-only .
        flake8 .
        
    - name: Test frontend
      working-directory: ./frontend
      run: npm run test:coverage
      
    - name: Test backend
      working-directory: ./backend
      run: |
        pytest --cov=app --cov-report=xml --cov-report=html
        
    - name: Upload frontend coverage
      uses: codecov/codecov-action@v3
      with:
        files: ./frontend/coverage/lcov.info
        flags: frontend
        
    - name: Upload backend coverage
      uses: codecov/codecov-action@v3
      with:
        files: ./backend/coverage.xml
        flags: backend

  security-scan:
    runs-on: ubuntu-latest
    needs: lint-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Audit npm packages
      working-directory: ./frontend
      run: npm audit --audit-level high
      
    - name: Audit Python packages
      working-directory: ./backend
      run: |
        pip install safety
        safety check

  build:
    runs-on: ubuntu-latest
    needs: [lint-and-test, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Login to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}
        
    - name: Build and push frontend image
      run: |
        docker build -t ${{ secrets.REGISTRY_LOGIN_SERVER }}/migration-estimator-frontend:${{ github.sha }} ./frontend
        docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/migration-estimator-frontend:${{ github.sha }}
        
    - name: Build and push backend image
      run: |
        docker build -t ${{ secrets.REGISTRY_LOGIN_SERVER }}/migration-estimator-backend:${{ github.sha }} ./backend
        docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/migration-estimator-backend:${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Deploy to Azure
      uses: azure/CLI@v1
      with:
        azcliversion: 2.53.0
        inlineScript: |
          # Deploy infrastructure
          az deployment sub create \
            --location "${{ secrets.AZURE_LOCATION }}" \
            --template-file infrastructure/main.bicep \
            --parameters infrastructure/main.parameters.json \
            --parameters environmentName="${{ secrets.AZURE_ENV_NAME }}" \
                        location="${{ secrets.AZURE_LOCATION }}" \
                        postgresAdminPassword="${{ secrets.POSTGRES_ADMIN_PASSWORD }}"
          
          # Update app settings with new container images
          az webapp config appsettings set \
            --resource-group "${{ secrets.AZURE_RESOURCE_GROUP }}" \
            --name "${{ secrets.FRONTEND_APP_NAME }}" \
            --settings DOCKER_CUSTOM_IMAGE_NAME="${{ secrets.REGISTRY_LOGIN_SERVER }}/migration-estimator-frontend:${{ github.sha }}"
          
          az webapp config appsettings set \
            --resource-group "${{ secrets.AZURE_RESOURCE_GROUP }}" \
            --name "${{ secrets.BACKEND_APP_NAME }}" \
            --settings DOCKER_CUSTOM_IMAGE_NAME="${{ secrets.REGISTRY_LOGIN_SERVER }}/migration-estimator-backend:${{ github.sha }}"
          
          # Restart apps to pull new images
          az webapp restart --resource-group "${{ secrets.AZURE_RESOURCE_GROUP }}" --name "${{ secrets.FRONTEND_APP_NAME }}"
          az webapp restart --resource-group "${{ secrets.AZURE_RESOURCE_GROUP }}" --name "${{ secrets.BACKEND_APP_NAME }}"
          
    - name: Run health checks
      run: |
        # Wait for deployment to complete
        sleep 120
        
        # Check frontend health
        curl -f "https://${{ secrets.FRONTEND_URL }}/health" || exit 1
        
        # Check backend health
        curl -f "https://${{ secrets.BACKEND_URL }}/health" || exit 1
        
    - name: Run database migrations
      run: |
        # Run any pending database migrations
        az webapp ssh --resource-group "${{ secrets.AZURE_RESOURCE_GROUP }}" --name "${{ secrets.BACKEND_APP_NAME }}" --command "alembic upgrade head"

  e2e-tests:
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install Cypress
      run: |
        cd e2e-tests
        npm ci
        
    - name: Run Cypress tests
      run: |
        cd e2e-tests
        npx cypress run --config baseUrl=https://${{ secrets.FRONTEND_URL }}
      env:
        CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
        
    - name: Upload test screenshots
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: cypress-screenshots
        path: e2e-tests/cypress/screenshots
